---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import PageWrapper from '../../layouts/PageWrapper.astro';
import Header from '../../components/Header.tsx';
import Footer from '../../components/Footer.tsx';
import type { BlogPost } from '../../types/BlogPost';
import PostSingle from '../../components/PostSingle.tsx';
import { serializePosts } from '../../utils/serializePosts';
import BaseHead from '../../components/BaseHead.astro';

export function getStaticPaths() {
  return [
    { params: { category: 'os' } },
    { params: { category: 'phone' } },
    { params: { category: 'cloud' } },
    { params: { category: 'selfhost' } },
    { params: { category: 'opensource' } },
    { params: { category: 'privacy' } },
    { params: { category: 'email' } },
    { params: { category: 'bigtech' } },
  ];
}

const { category } = Astro.params;

const posts = (await getCollection('blog'))
  .filter((post) => post.data.categoryLink === category)
  .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

if (!posts) {
  throw new Error(`Post not found.`);
}

const categoryPosts = serializePosts(posts);
---

<Layout>
  <BaseHead
    slot="basehead"
    title={categoryPosts.length > 0 ? categoryPosts[0].data.category : category}
    description="An overview of all post categories."
  />
  <Fragment slot="body">
    <Header />
    <PageWrapper>
      <div class="w-full pt-28 md:grid md:grid-cols-1 md:gap-5 lg:grid-cols-2 xl:grid-cols-3">
        {
          categoryPosts.map((post: BlogPost) => (
            <div class="mt-10">
              <PostSingle client:load post={post} key={post.id} />
            </div>
          ))
        }
      </div>
    </PageWrapper>
  </Fragment>
  <Fragment slot="footer">
    <Footer />
  </Fragment>
</Layout>;
